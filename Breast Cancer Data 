{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#Import libraries"],"metadata":{"id":"CtsDcnj3okKO"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"tEfuyjkWkF5G","executionInfo":{"status":"ok","timestamp":1664486559068,"user_tz":-120,"elapsed":1567,"user":{"displayName":"Yasmeen Ragheb","userId":"06451266060595321340"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns"]},{"cell_type":"markdown","source":["#load Data\n"],"metadata":{"id":"mQ3Nwhnlotnl"}},{"cell_type":"code","source":["df = pd.read_csv(\"breast-cancer-wisconsin.data\", header=None)\n","df.head()\n","#df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"Y1Dv-M4ro4zR","executionInfo":{"status":"ok","timestamp":1664486561550,"user_tz":-120,"elapsed":5,"user":{"displayName":"Yasmeen Ragheb","userId":"06451266060595321340"}},"outputId":"fd3aa000-d776-45b1-ff23-040add3118c6"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        0   1   2   3   4   5   6   7   8   9   10\n","0  1000025   5   1   1   1   2   1   3   1   1   2\n","1  1002945   5   4   4   5   7  10   3   2   1   2\n","2  1015425   3   1   1   1   2   2   3   1   1   2\n","3  1016277   6   8   8   1   3   4   3   7   1   2\n","4  1017023   4   1   1   3   2   1   3   1   1   2"],"text/html":["\n","  <div id=\"df-e53edf25-b3bd-4b48-bc9d-d20ec35f3195\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1000025</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1002945</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>7</td>\n","      <td>10</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1015425</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1016277</td>\n","      <td>6</td>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1017023</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e53edf25-b3bd-4b48-bc9d-d20ec35f3195')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e53edf25-b3bd-4b48-bc9d-d20ec35f3195 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e53edf25-b3bd-4b48-bc9d-d20ec35f3195');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":2}]},{"cell_type":"markdown","source":["#Cleaning\n","*   Rename Columns\n","* Dealing with missing values\n","*   Searching for duplicates\n","*   Data Type\n","\n","\n","\n"],"metadata":{"id":"9mc62POnwqin"}},{"cell_type":"code","source":["#Rename Columns \n","df.rename(columns={0:'ID',1:'Clump Thickness',2:'Uniformity of Cell Size',3:'Uniformity of Cell Shape',4:'Marginal Adhesion',\n","5:'Single Epithelial Cell Size',6:'Bare Nuclei',7:'Bland Chromatin',8:'Normal Nucleoli',\n","                 9:'Mitoses',10:'Class'}, inplace=True)\n","df.info()"],"metadata":{"id":"9tHa2l9JxU8I","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664486570619,"user_tz":-120,"elapsed":485,"user":{"displayName":"Yasmeen Ragheb","userId":"06451266060595321340"}},"outputId":"f30c277c-da43-4cb0-f920-0db634552727"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 699 entries, 0 to 698\n","Data columns (total 11 columns):\n"," #   Column                       Non-Null Count  Dtype \n","---  ------                       --------------  ----- \n"," 0   ID                           699 non-null    int64 \n"," 1   Clump Thickness              699 non-null    int64 \n"," 2   Uniformity of Cell Size      699 non-null    int64 \n"," 3   Uniformity of Cell Shape     699 non-null    int64 \n"," 4   Marginal Adhesion            699 non-null    int64 \n"," 5   Single Epithelial Cell Size  699 non-null    int64 \n"," 6   Bare Nuclei                  699 non-null    object\n"," 7   Bland Chromatin              699 non-null    int64 \n"," 8   Normal Nucleoli              699 non-null    int64 \n"," 9   Mitoses                      699 non-null    int64 \n"," 10  Class                        699 non-null    int64 \n","dtypes: int64(10), object(1)\n","memory usage: 60.2+ KB\n"]}]},{"cell_type":"code","source":["#for i in df:\n","#    print(df[i].unique())\n","df['Bare Nuclei'].unique()"],"metadata":{"id":"dCGUTVR0711T","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664486575040,"user_tz":-120,"elapsed":3,"user":{"displayName":"Yasmeen Ragheb","userId":"06451266060595321340"}},"outputId":"6ecf9fb6-1d9b-489c-dff6-9ef17a09d251"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['1', '10', '2', '4', '3', '9', '7', '?', '5', '8', '6'],\n","      dtype=object)"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["#Missing Values\n","df.isna().sum()"],"metadata":{"id":"q4WP4I7pwlf1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664486579728,"user_tz":-120,"elapsed":3,"user":{"displayName":"Yasmeen Ragheb","userId":"06451266060595321340"}},"outputId":"bfeab5e5-6d41-45ca-cf3a-8d9e019c7dab"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ID                             0\n","Clump Thickness                0\n","Uniformity of Cell Size        0\n","Uniformity of Cell Shape       0\n","Marginal Adhesion              0\n","Single Epithelial Cell Size    0\n","Bare Nuclei                    0\n","Bland Chromatin                0\n","Normal Nucleoli                0\n","Mitoses                        0\n","Class                          0\n","dtype: int64"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["df['Bare Nuclei'].replace('?',0,inplace=True)"],"metadata":{"id":"LP1ojYz088h5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#casting data type \n","df['Bare Nuclei'] = df['Bare Nuclei'].astype('int')\n","df.dtypes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E3yVEIkTAdG0","executionInfo":{"status":"ok","timestamp":1664467878325,"user_tz":-120,"elapsed":445,"user":{"displayName":"Yasmeen Ragheb","userId":"06451266060595321340"}},"outputId":"fdd29678-7590-41a7-96df-7d2616d7773f"},"execution_count":208,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ID                             int64\n","Clump Thickness                int64\n","Uniformity of Cell Size        int64\n","Uniformity of Cell Shape       int64\n","Marginal Adhesion              int64\n","Single Epithelial Cell Size    int64\n","Bare Nuclei                    int64\n","Bland Chromatin                int64\n","Normal Nucleoli                int64\n","Mitoses                        int64\n","Class                          int64\n","dtype: object"]},"metadata":{},"execution_count":208}]},{"cell_type":"code","source":["df['Bare Nuclei'].replace(0,df['Bare Nuclei'].median(),inplace=True)"],"metadata":{"id":"dC3Cl-HdCAjr","executionInfo":{"status":"ok","timestamp":1664467881428,"user_tz":-120,"elapsed":589,"user":{"displayName":"Yasmeen Ragheb","userId":"06451266060595321340"}}},"execution_count":209,"outputs":[]},{"cell_type":"code","source":["#Searching for duplicates\n","df.duplicated().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g3b0atqOAufo","executionInfo":{"status":"ok","timestamp":1664467883308,"user_tz":-120,"elapsed":455,"user":{"displayName":"Yasmeen Ragheb","userId":"06451266060595321340"}},"outputId":"0519e73f-8b7b-48be-c067-334d477d77de"},"execution_count":210,"outputs":[{"output_type":"execute_result","data":{"text/plain":["9"]},"metadata":{},"execution_count":210}]},{"cell_type":"code","source":["df.drop_duplicates(inplace=True)\n","df.duplicated().sum()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SFS_m2hBBF9A","executionInfo":{"status":"ok","timestamp":1664467885953,"user_tz":-120,"elapsed":576,"user":{"displayName":"Yasmeen Ragheb","userId":"06451266060595321340"}},"outputId":"2f98dd28-4e41-40b0-9198-f5308ae40e8a"},"execution_count":211,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":211}]},{"cell_type":"markdown","source":["#Generating Model"],"metadata":{"id":"--Pl71DBPv1y"}},{"cell_type":"code","source":["#Import Modules\n","from sklearn import preprocessing\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.model_selection import train_test_split"],"metadata":{"id":"al3LV88VNgS7","executionInfo":{"status":"ok","timestamp":1664467893618,"user_tz":-120,"elapsed":457,"user":{"displayName":"Yasmeen Ragheb","userId":"06451266060595321340"}}},"execution_count":213,"outputs":[]},{"cell_type":"code","source":["#Split dataset into training set and test set\n","X_train, X_test, y_train, y_test = train_test_split(df, lable , test_size=0.3)"],"metadata":{"id":"Kp28ukPu2YMp","executionInfo":{"status":"ok","timestamp":1664467895649,"user_tz":-120,"elapsed":456,"user":{"displayName":"Yasmeen Ragheb","userId":"06451266060595321340"}}},"execution_count":214,"outputs":[]},{"cell_type":"code","source":["#Create KNN Classifier, K=9\n","knn = KNeighborsClassifier(n_neighbors=9)\n","knn.fit(X_train, y_train)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rDzQiTGQ3-2R","executionInfo":{"status":"ok","timestamp":1664469661157,"user_tz":-120,"elapsed":534,"user":{"displayName":"Yasmeen Ragheb","userId":"06451266060595321340"}},"outputId":"62b9a1cd-35fe-40e4-db0e-f5fb28b681af"},"execution_count":221,"outputs":[{"output_type":"execute_result","data":{"text/plain":["KNeighborsClassifier(n_neighbors=9)"]},"metadata":{},"execution_count":221}]},{"cell_type":"code","source":["y_pred = knn.predict(X_test)\n","y_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IqxxauX2H0y8","executionInfo":{"status":"ok","timestamp":1664469665899,"user_tz":-120,"elapsed":625,"user":{"displayName":"Yasmeen Ragheb","userId":"06451266060595321340"}},"outputId":"1e666c66-a0b0-42af-e73a-c2067fb04106"},"execution_count":222,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 2, 4, 4, 2, 2, 2, 4, 2, 2, 2,\n","       2, 4, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 4, 2, 2, 2, 4, 2, 4, 2,\n","       2, 2, 4, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n","       2, 2, 2, 2, 4, 4, 4, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2,\n","       2, 2, 4, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 4, 2, 2,\n","       4, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 2, 4, 4, 2, 2, 2, 2, 2, 4, 2,\n","       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n","       2, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 4, 2, 2,\n","       4, 2, 2, 4, 4, 4, 2, 2, 4, 2, 2, 2, 2, 4, 2, 4, 2, 2, 2, 4, 2, 4,\n","       2, 2, 2, 2, 2, 2, 2, 2, 2])"]},"metadata":{},"execution_count":222}]},{"cell_type":"code","source":["#Accuracy Calculation\n","print(knn.score(X_test, y_test))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XeYUNbu94TxQ","executionInfo":{"status":"ok","timestamp":1664467900535,"user_tz":-120,"elapsed":536,"user":{"displayName":"Yasmeen Ragheb","userId":"06451266060595321340"}},"outputId":"c406ce91-902e-42cc-f753-81161966407c"},"execution_count":216,"outputs":[{"output_type":"stream","name":"stdout","text":["0.6618357487922706\n"]}]},{"cell_type":"code","source":["#DataSet Accuracy\n","neighbors = np.arange(1, 9)\n","train_accuracy = np.empty(len(neighbors))\n","test_accuracy = np.empty(len(neighbors))\n"],"metadata":{"id":"2PzWAYyT55e6","executionInfo":{"status":"ok","timestamp":1664467968066,"user_tz":-120,"elapsed":537,"user":{"displayName":"Yasmeen Ragheb","userId":"06451266060595321340"}}},"execution_count":218,"outputs":[]},{"cell_type":"code","source":["#Loop over K values\n","for i, k in enumerate(neighbors):\n","    knn = KNeighborsClassifier(n_neighbors=k)\n","    knn.fit(X_train, y_train)\n","      \n","    # Compute training and test data accuracy\n","    train_accuracy[i] = knn.score(X_train, y_train)\n","    test_accuracy[i] = knn.score(X_test, y_test)\n","  \n"],"metadata":{"id":"wQZTde7E5_yD","executionInfo":{"status":"ok","timestamp":1664467969931,"user_tz":-120,"elapsed":839,"user":{"displayName":"Yasmeen Ragheb","userId":"06451266060595321340"}}},"execution_count":219,"outputs":[]},{"cell_type":"code","source":["# Generate plot\n","plt.plot(neighbors, test_accuracy, label = 'Testing dataset Accuracy')\n","plt.plot(neighbors, train_accuracy, label = 'Training dataset Accuracy')\n","  \n","plt.legend()\n","plt.xlabel('n_neighbors')\n","plt.ylabel('Accuracy')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":280},"id":"YMYu_d_rA7CZ","executionInfo":{"status":"ok","timestamp":1664467971481,"user_tz":-120,"elapsed":7,"user":{"displayName":"Yasmeen Ragheb","userId":"06451266060595321340"}},"outputId":"d8bb0e9e-62e8-4c94-af64-1e00df379010"},"execution_count":220,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["import seaborn as sns\n",">>> cmap = sns.cubehelix_palette(as_cmap=True)\n",">>> f, ax = plt.subplots()\n",">>> points = ax.scatter( X_test, X_test, , s=50, cmap=cmap)\n",">>> f.colorbar(points)\n",">>> plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"4Fc_asgqJjYV","executionInfo":{"status":"error","timestamp":1664470251777,"user_tz":-120,"elapsed":626,"user":{"displayName":"Yasmeen Ragheb","userId":"06451266060595321340"}},"outputId":"9023b928-f35b-4503-be69-be950e5fa59b"},"execution_count":225,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-225-96ca1b9fcf59>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mcmap\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcubehelix_palette\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mas_cmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplots\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mpoints\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtest_preds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcmap\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolorbar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpoints\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'test_preds' is not defined"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["features =df[['Clump Thickness','Uniformity of Cell Size','Uniformity of Cell Shape','Single Epithelial Cell Size','Bare Nuclei','Bland Chromatin','Normal Nucleoli','Mitoses']]\n","lable = df[\"Class\"]"],"metadata":{"id":"1sUnBcWarXMh","executionInfo":{"status":"ok","timestamp":1664463685468,"user_tz":-120,"elapsed":476,"user":{"displayName":"Yasmeen Ragheb","userId":"06451266060595321340"}}},"execution_count":156,"outputs":[]},{"cell_type":"code","source":["model = KNeighborsClassifier(n_neighbors=3)\n","model.fit(features, \n","          lable)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AN877TIhmX0d","executionInfo":{"status":"ok","timestamp":1664464472446,"user_tz":-120,"elapsed":646,"user":{"displayName":"Yasmeen Ragheb","userId":"06451266060595321340"}},"outputId":"fdf278a1-93b0-4a31-fb0f-da8c451c5aa7"},"execution_count":173,"outputs":[{"output_type":"execute_result","data":{"text/plain":["KNeighborsClassifier(n_neighbors=3)"]},"metadata":{},"execution_count":173}]},{"cell_type":"code","source":["predicted= model.predict([[9,2,3,5,4,6,6,7]])\n","print(predicted)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TNwv8vqJxeTw","executionInfo":{"status":"ok","timestamp":1664464465956,"user_tz":-120,"elapsed":448,"user":{"displayName":"Yasmeen Ragheb","userId":"06451266060595321340"}},"outputId":"a71c80e4-ccfb-483f-cf41-be1f25c55f24"},"execution_count":172,"outputs":[{"output_type":"stream","name":"stdout","text":["[4]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but KNeighborsClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n"]}]}]}